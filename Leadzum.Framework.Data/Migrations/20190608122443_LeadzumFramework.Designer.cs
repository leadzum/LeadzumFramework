// <auto-generated />
using System;
using Leadzum.Framework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Leadzum.Framework.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190608122443_LeadzumFramework")]
    partial class LeadzumFramework
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.EventLog", b =>
                {
                    b.Property<long>("EventLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogCreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("LogDetail")
                        .IsRequired();

                    b.Property<string>("LogMachineName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool?>("LogNotificationPending");

                    b.Property<int>("LogTypeId");

                    b.Property<int?>("LogUserId");

                    b.Property<string>("LogUserName")
                        .HasMaxLength(256);

                    b.HasKey("EventLogId");

                    b.HasIndex("LogTypeId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.EventLogType", b =>
                {
                    b.Property<int>("LogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<bool?>("EmailNotificationIsActive");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("KeepMostRecent");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LogCategory");

                    b.Property<bool>("LoggingIsActive");

                    b.Property<string>("MailToAddress")
                        .HasMaxLength(50);

                    b.HasKey("LogTypeId");

                    b.ToTable("EventLogTypes");

                    b.HasData(
                        new
                        {
                            LogTypeId = 1,
                            FriendlyName = "User Login Success",
                            Key = "LOGIN_SUCCESS",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 2,
                            FriendlyName = "User Login Failure",
                            Key = "LOGIN_FAILURE",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 3,
                            FriendlyName = "User Logout",
                            Key = "LOGOUT",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 4,
                            FriendlyName = "System Configuration Updated",
                            Key = "SYSTEM_CONFIG_UPDATED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 5,
                            FriendlyName = "Data Synchronized",
                            Key = "DATA_SYNCED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 6,
                            FriendlyName = "New User Created",
                            Key = "USER_CREATED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 7,
                            FriendlyName = "New User Registered",
                            Key = "USER_REGISTERED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 8,
                            FriendlyName = "User Updated",
                            Key = "USER_UPDATED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 9,
                            FriendlyName = "User Deleted",
                            Key = "USER_DELETED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 10,
                            FriendlyName = "User Restored",
                            Key = "USER_RESTORED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 11,
                            FriendlyName = "User Removed",
                            Key = "USER_REMOVED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 12,
                            FriendlyName = "User Password Changed",
                            Key = "USER_PSW_CHANGED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 13,
                            FriendlyName = "New Role Created",
                            Key = "ROLE_CREATED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 14,
                            FriendlyName = "Role Updated",
                            Key = "ROLE_REGISTERED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 15,
                            FriendlyName = "Role Deleted",
                            Key = "ROLE_DELETED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 16,
                            FriendlyName = "New Module Created",
                            Key = "MODULE_CREATED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 17,
                            FriendlyName = "Module Updated",
                            Key = "MODULE_REGISTERED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 18,
                            FriendlyName = "Module Deleted",
                            Key = "MODULE_DELETED",
                            LogCategory = 1,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 1000,
                            FriendlyName = "Task Scheduler Started",
                            Key = "TASK_SCHEDULER_START",
                            LogCategory = 2,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 1001,
                            FriendlyName = "Task Scheduler Stopped",
                            Key = "TASK_SCHEDULER_STOP",
                            LogCategory = 2,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 2000,
                            FriendlyName = "General Exception",
                            Key = "GENERAL_EXCEPTION",
                            LogCategory = 3,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 2001,
                            FriendlyName = "Web Service Exception",
                            Key = "WEB_SERVICE_EXCEPTION",
                            LogCategory = 3,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 2002,
                            FriendlyName = "Task Scheduler Exception",
                            Key = "TASK_SCHEDULER_EXCEPTION",
                            LogCategory = 3,
                            LoggingIsActive = true
                        },
                        new
                        {
                            LogTypeId = 2003,
                            FriendlyName = "Database Exception",
                            Key = "DB_EXCEPTION",
                            LogCategory = 3,
                            LoggingIsActive = true
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.List", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("ListName")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<int>("SortOrder");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("EntryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Lists");

                    b.HasData(
                        new
                        {
                            EntryId = 1,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 3, DateTimeKind.Local).AddTicks(6507),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 3, DateTimeKind.Local).AddTicks(7166),
                            ListName = "DateFormat",
                            SortOrder = 0,
                            Text = "yyyy-MM-dd",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 2,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1615),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1623),
                            ListName = "DateFormat",
                            SortOrder = 1,
                            Text = "M/d/yyyy",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 3,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1777),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1777),
                            ListName = "DateFormat",
                            SortOrder = 2,
                            Text = "MM/dd/yyyy",
                            Value = "3"
                        },
                        new
                        {
                            EntryId = 4,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1836),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1840),
                            ListName = "DateFormat",
                            SortOrder = 3,
                            Text = "MMM d, yyyy",
                            Value = "4"
                        },
                        new
                        {
                            EntryId = 5,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1892),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1896),
                            ListName = "DateFormat",
                            SortOrder = 4,
                            Text = "MMM dd, yyyy",
                            Value = "5"
                        },
                        new
                        {
                            EntryId = 6,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1998),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(1998),
                            ListName = "DateFormat",
                            SortOrder = 5,
                            Text = "d/M/yyyy",
                            Value = "6"
                        },
                        new
                        {
                            EntryId = 7,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2057),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2057),
                            ListName = "DateFormat",
                            SortOrder = 6,
                            Text = "dd/MM/yyyy",
                            Value = "7"
                        },
                        new
                        {
                            EntryId = 8,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2109),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2109),
                            ListName = "DateFormat",
                            SortOrder = 7,
                            Text = "d MMM, yyyy",
                            Value = "8"
                        },
                        new
                        {
                            EntryId = 9,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2156),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2156),
                            ListName = "DateFormat",
                            SortOrder = 8,
                            Text = "dd MMM, yyyy",
                            Value = "9"
                        },
                        new
                        {
                            EntryId = 10,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2212),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2212),
                            ListName = "DateFormat",
                            SortOrder = 9,
                            Text = "dd-MMM-yyyy",
                            Value = "10"
                        },
                        new
                        {
                            EntryId = 11,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2421),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2421),
                            ListName = "LongTimeFormat",
                            SortOrder = 0,
                            Text = "h:mm:ss tt",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 12,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2528),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2528),
                            ListName = "LongTimeFormat",
                            SortOrder = 1,
                            Text = "hh:mm:ss tt",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 13,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2579),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2579),
                            ListName = "LongTimeFormat",
                            SortOrder = 2,
                            Text = "H:mm:ss",
                            Value = "3"
                        },
                        new
                        {
                            EntryId = 14,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2674),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2674),
                            ListName = "LongTimeFormat",
                            SortOrder = 3,
                            Text = "HH:mm:ss",
                            Value = "4"
                        },
                        new
                        {
                            EntryId = 15,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2808),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2812),
                            ListName = "ShortTimeFormat",
                            SortOrder = 0,
                            Text = "h:mm tt",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 16,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2895),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2895),
                            ListName = "ShortTimeFormat",
                            SortOrder = 1,
                            Text = "hh:mm tt",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 17,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2942),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2946),
                            ListName = "ShortTimeFormat",
                            SortOrder = 2,
                            Text = "H:mm",
                            Value = "3"
                        },
                        new
                        {
                            EntryId = 18,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2994),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(2994),
                            ListName = "ShortTimeFormat",
                            SortOrder = 3,
                            Text = "HH:mm",
                            Value = "4"
                        },
                        new
                        {
                            EntryId = 19,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3100),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3100),
                            ListName = "DataType",
                            SortOrder = 0,
                            Text = "Undefined",
                            Value = "0"
                        },
                        new
                        {
                            EntryId = 20,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3132),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3136),
                            ListName = "DataType",
                            SortOrder = 1,
                            Text = "Integer",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 21,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3207),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3211),
                            ListName = "DataType",
                            SortOrder = 2,
                            Text = "Text",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 22,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3215),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3215),
                            ListName = "DataType",
                            SortOrder = 3,
                            Text = "Boolean",
                            Value = "3"
                        },
                        new
                        {
                            EntryId = 23,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3219),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3223),
                            ListName = "DataType",
                            SortOrder = 4,
                            Text = "DateTime",
                            Value = "4"
                        },
                        new
                        {
                            EntryId = 24,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3227),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3227),
                            ListName = "DataType",
                            SortOrder = 5,
                            Text = "Image",
                            Value = "5"
                        },
                        new
                        {
                            EntryId = 25,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3278),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3282),
                            ListName = "LogCategory",
                            SortOrder = 0,
                            Text = "Admin Log",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 26,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3361),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3365),
                            ListName = "LogCategory",
                            SortOrder = 1,
                            Text = "Maintenance Log",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 27,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3417),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3417),
                            ListName = "LogCategory",
                            SortOrder = 2,
                            Text = "Exception Log",
                            Value = "3"
                        },
                        new
                        {
                            EntryId = 28,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3511),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3515),
                            ListName = "LogCategory",
                            SortOrder = 0,
                            Text = "WebServiceUser",
                            Value = "1"
                        },
                        new
                        {
                            EntryId = 29,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3571),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3571),
                            ListName = "LogCategory",
                            SortOrder = 1,
                            Text = "SystemAdmin",
                            Value = "2"
                        },
                        new
                        {
                            EntryId = 30,
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3602),
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 4, DateTimeKind.Local).AddTicks(3602),
                            ListName = "LogCategory",
                            SortOrder = 2,
                            Text = "SystemUser",
                            Value = "3"
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("IconFile")
                        .HasMaxLength(100);

                    b.Property<bool>("IsClickable");

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId");

                    b.Property<int>("Type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("ViewOrder");

                    b.HasKey("ModuleId");

                    b.HasIndex("ParentId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            Code = "DASHBOARD",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 10, DateTimeKind.Local).AddTicks(6491),
                            Description = "Dashboard",
                            IconFile = "fa fa-tachometer",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 10, DateTimeKind.Local).AddTicks(7120),
                            Name = "Dashboard",
                            Type = 1,
                            Url = "Home/Index",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 2,
                            Code = "ADMIN_USER_AND_PERMISSIOIN",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3580),
                            Description = "User, role and permission management",
                            IconFile = "fa fa-users",
                            IsClickable = false,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3587),
                            Name = "User & Permission",
                            Type = 1,
                            Url = "",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 3,
                            Code = "ADMIN_SYSTEM",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3631),
                            Description = "System configuration",
                            IconFile = "fa fa-cogs",
                            IsClickable = false,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3631),
                            Name = "System",
                            Type = 1,
                            Url = "",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 4,
                            Code = "ADMIN_USER_MANAGEMENT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3785),
                            Description = "User management",
                            IconFile = "fa fa-tachometer",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3785),
                            Name = "Users",
                            ParentId = 2,
                            Type = 1,
                            Url = "Admin/User/Index",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            Code = "ADMIN_ROLE_MANAGEMENT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3789),
                            Description = "Role management",
                            IconFile = "fa fa-users",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3789),
                            Name = "Roles",
                            ParentId = 2,
                            Type = 1,
                            Url = "Admin/Role/Index",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 6,
                            Code = "ADMIN_PERMISSION_MANAGEMENT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3793),
                            Description = "Permission management",
                            IconFile = "fa fa-cogs",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3793),
                            Name = "Permissions",
                            ParentId = 2,
                            Type = 1,
                            Url = "Admin/Permission/Index",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 7,
                            Code = "ADMIN_SYSTEM_CONFIG",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3903),
                            Description = "System configuration",
                            IconFile = "fa fa-tachometer",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3903),
                            Name = "Configuration",
                            ParentId = 3,
                            Type = 1,
                            Url = "Admin/System/Index",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 8,
                            Code = "ADMIN_SYSTEM_MODULE",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3907),
                            Description = "System module management",
                            IconFile = "fa fa-users",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3907),
                            Name = "Modules",
                            ParentId = 3,
                            Type = 1,
                            Url = "Admin/Moudle/Index",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 9,
                            Code = "ADMIN_SYSTEM_AUDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3907),
                            Description = "System audit logs",
                            IconFile = "fa fa-cogs",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3907),
                            Name = "Audit Logs",
                            ParentId = 3,
                            Type = 1,
                            Url = "Admin/Audit/Index",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 10,
                            Code = "ADMIN_SYSTEM_GENERAL",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3911),
                            Description = "System general settings",
                            IconFile = "fa fa-tachometer",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3915),
                            Name = "General",
                            ParentId = 7,
                            Type = 1,
                            Url = "Admin/System/General",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 11,
                            Code = "ADMIN_SYSTEM_ADVANCED",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3915),
                            Description = "System advanced settings",
                            IconFile = "fa fa-users",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3915),
                            Name = "Advanced",
                            ParentId = 7,
                            Type = 1,
                            Url = "Admin/System/Advanced",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 12,
                            Code = "ACTION_SYSTEM_GENERAL_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3919),
                            Description = "Edit system general settings",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3919),
                            Name = "Edit",
                            ParentId = 10,
                            Type = 1,
                            Url = "Admin/System/GeneralEdit",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 13,
                            Code = "ACTION_SYSTEM_ADVANCED_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3923),
                            Description = "Edit system advanced settings",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3923),
                            Name = "Edit",
                            ParentId = 11,
                            Type = 1,
                            Url = "Admin/System/AdvancedEdit",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 14,
                            Code = "ACTION_USER_ADD",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3927),
                            Description = "Add User",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3927),
                            Name = "Add User",
                            ParentId = 4,
                            Type = 3,
                            Url = "Admin/User/Add",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 15,
                            Code = "ACTION_USER_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3927),
                            Description = "Edit User",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3927),
                            Name = "Edit User",
                            ParentId = 4,
                            Type = 3,
                            Url = "Admin/User/Edit",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 16,
                            Code = "ACTION_USER_DELETE",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3931),
                            Description = "Delete User",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3931),
                            Name = "Delete User",
                            ParentId = 4,
                            Type = 3,
                            Url = "Admin/User/Delete",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 17,
                            Code = "ACTION_ROLE_ADD",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3935),
                            Description = "Add Role",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3935),
                            Name = "Add Role",
                            ParentId = 5,
                            Type = 3,
                            Url = "Admin/Role/Add",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 18,
                            Code = "ACTION_ROLE_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3935),
                            Description = "Edit Role",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3935),
                            Name = "Edit Role",
                            ParentId = 5,
                            Type = 3,
                            Url = "Admin/Role/Edit",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 19,
                            Code = "ACTION_ROLE_DELETE",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3939),
                            Description = "Delete Role",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3939),
                            Name = "Delete Role",
                            ParentId = 5,
                            Type = 3,
                            Url = "Admin/Role/Delete",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 20,
                            Code = "ACTION_PERMISSION_ADD",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3943),
                            Description = "Add Permission",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3943),
                            Name = "Add Permission",
                            ParentId = 6,
                            Type = 3,
                            Url = "Admin/Permission/Add",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 21,
                            Code = "ACTION_PERMISSION_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3943),
                            Description = "Edit Permission",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3943),
                            Name = "Edit Permission",
                            ParentId = 6,
                            Type = 3,
                            Url = "Admin/Permission/Edit",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 22,
                            Code = "ACTION_PERMISSION_DELETE",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3947),
                            Description = "Delete Permission",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3947),
                            Name = "Delete Permission",
                            ParentId = 6,
                            Type = 3,
                            Url = "Admin/Permission/Delete",
                            ViewOrder = 3
                        },
                        new
                        {
                            ModuleId = 23,
                            Code = "ACTION_MODULE_ADD",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3947),
                            Description = "Add Module",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3951),
                            Name = "Add Module",
                            ParentId = 8,
                            Type = 3,
                            Url = "Admin/Module/Add",
                            ViewOrder = 1
                        },
                        new
                        {
                            ModuleId = 24,
                            Code = "ACTION_MODULE_EDIT",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3951),
                            Description = "Edit Module",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3951),
                            Name = "Edit Module",
                            ParentId = 8,
                            Type = 3,
                            Url = "Admin/Module/Edit",
                            ViewOrder = 2
                        },
                        new
                        {
                            ModuleId = 25,
                            Code = "ACTION_MODULE_DELETE",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3955),
                            Description = "Delete Module",
                            IsClickable = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 11, DateTimeKind.Local).AddTicks(3955),
                            Name = "Delete Module",
                            ParentId = 8,
                            Type = 3,
                            Url = "Admin/Module/Delete",
                            ViewOrder = 3
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsConfigurable");

                    b.Property<int>("ModuleId");

                    b.Property<string>("PermissionCode")
                        .HasMaxLength(50);

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Priority");

                    b.HasKey("PermissionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowAccess");

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("UserId");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.SystemConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigCategory")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ConfigValue");

                    b.Property<int>("DataType");

                    b.Property<string>("DefaultValue");

                    b.Property<bool>("IsVisible");

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("Length");

                    b.Property<string>("ValidationExpression")
                        .HasMaxLength(1000);

                    b.Property<int>("ViewOrder");

                    b.HasKey("ConfigId");

                    b.HasIndex("ConfigName")
                        .IsUnique();

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            ConfigId = 1,
                            ConfigCategory = "SYS_GENERAL",
                            ConfigName = "DateFormat",
                            ConfigValue = "dd-MMM-yyyy",
                            DataType = 2,
                            DefaultValue = "dd-MMM-yyyy",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 999, DateTimeKind.Local).AddTicks(7368),
                            Length = 15,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 2,
                            ConfigCategory = "SYS_GENERAL",
                            ConfigName = "ShortTimeFormat",
                            ConfigValue = "HH:mm",
                            DataType = 2,
                            DefaultValue = "HH:mm",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3278),
                            Length = 15,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 3,
                            ConfigCategory = "SYS_GENERAL",
                            ConfigName = "LongTimeFormat",
                            ConfigValue = "HH:mm:ss",
                            DataType = 2,
                            DefaultValue = "HH:mm:ss",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3318),
                            Length = 15,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 4,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "Server",
                            ConfigValue = "",
                            DataType = 2,
                            DefaultValue = "",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3322),
                            Length = 30,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 5,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "Port",
                            ConfigValue = "25",
                            DataType = 1,
                            DefaultValue = "25",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3322),
                            Length = 0,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 6,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "RequireAuthentication",
                            ConfigValue = "False",
                            DataType = 3,
                            DefaultValue = "False",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3330),
                            Length = 0,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 7,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "UserName",
                            ConfigValue = "",
                            DataType = 2,
                            DefaultValue = "",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3330),
                            Length = 30,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 8,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "Password",
                            ConfigValue = "",
                            DataType = 2,
                            DefaultValue = "",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3334),
                            Length = 30,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 9,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "EnableSSL",
                            ConfigValue = "False",
                            DataType = 2,
                            DefaultValue = "False",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3334),
                            Length = 0,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 10,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "MailFrom",
                            ConfigValue = "",
                            DataType = 2,
                            DefaultValue = "",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3338),
                            Length = 30,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 11,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "DisplayName",
                            ConfigValue = "",
                            DataType = 2,
                            DefaultValue = "",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3342),
                            Length = 30,
                            ViewOrder = 0
                        },
                        new
                        {
                            ConfigId = 12,
                            ConfigCategory = "SYS_SMTP",
                            ConfigName = "Activated",
                            ConfigValue = "False",
                            DataType = 3,
                            DefaultValue = "False",
                            IsVisible = true,
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 43, 0, DateTimeKind.Local).AddTicks(3342),
                            Length = 0,
                            ViewOrder = 0
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsAuthorized");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("PasswordChangeStatus");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42529d69-4914-493f-ab33-4c26551a56de",
                            CreatedOnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Super Admin",
                            Email = "superadmin@mail.com",
                            EmailConfirmed = false,
                            IsAuthorized = false,
                            IsDeleted = false,
                            LastModifiedOnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@MAIL.COM",
                            NormalizedUserName = "SUPERADMIN@MAIL.COM",
                            PasswordChangeStatus = 0,
                            PasswordHash = "AQAAAAEAACcQAAAAEPhWm0uODTRr5IlIyi319vgw9L7KHJIV4N33MbYaTWkdtOUd0Drl2XM4wwmuOk2FLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@mail.com",
                            UserTypeId = 0
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<int?>("LastModifiedByUserId");

                    b.Property<DateTime>("LastModifiedOnDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UserCategory");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "079e0657-6e15-4083-a78c-710d4c613faf",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 993, DateTimeKind.Local).AddTicks(4525),
                            Description = "Web Service Client",
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 994, DateTimeKind.Local).AddTicks(981),
                            Name = "Web Service Client",
                            RoleCode = "SERVICE_CLIENT",
                            UserCategory = 1
                        },
                        new
                        {
                            Id = 100,
                            ConcurrencyStamp = "368ed497-4294-4058-82d1-154d60e1d0a8",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8364),
                            Description = "Super Admin",
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8367),
                            Name = "Super Admin",
                            RoleCode = "SUPER_ADMIN",
                            UserCategory = 2
                        },
                        new
                        {
                            Id = 101,
                            ConcurrencyStamp = "ad12519d-0c1f-4a61-93c7-df654d8e983a",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8687),
                            Description = "Admin",
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8687),
                            Name = "Admin",
                            RoleCode = "ADMIN",
                            UserCategory = 2
                        },
                        new
                        {
                            Id = 200,
                            ConcurrencyStamp = "9918143a-e079-4f6a-b20d-9cd8ec77aeba",
                            CreatedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8826),
                            Description = "Member",
                            LastModifiedOnDate = new DateTime(2019, 6, 8, 20, 24, 42, 995, DateTimeKind.Local).AddTicks(8826),
                            Name = "Member",
                            RoleCode = "MEMBER",
                            UserCategory = 3
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 100
                        });
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.EventLog", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.Entities.EventLogType", "EventLogType")
                        .WithMany("EventLogs")
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.List", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.Entities.List", "Parent")
                        .WithMany("Lists")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.Module", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.Entities.Module", "Parent")
                        .WithMany("Modules")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.Permission", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.Entities.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.IdentityRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.ApplicationUser", "User")
                        .WithMany("RolePermissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityRoleClaim", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserClaim", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserLogin", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserRole", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leadzum.Framework.Data.IdentityEntities.IdentityUserToken", b =>
                {
                    b.HasOne("Leadzum.Framework.Data.IdentityEntities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
